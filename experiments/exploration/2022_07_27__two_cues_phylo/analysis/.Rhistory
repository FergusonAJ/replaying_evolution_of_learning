if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary$count)
}
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary$count)
}
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
depth = 0
mask = classification_summary$depth == depth
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
depth = 266
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
mask = classification_summary$depth == depth
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
dplyr::mutate(classification_summary, pct = n / sum(n))
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
dplyr::mutate(classification_summary, pct = n / sum(n))
dplyr::mutate(classification_summary, pct = count / sum(count))
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area()
classification_summary = dplyr::mutate(classification_summary, pct = count / sum(count))
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area()
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
}
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
}
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA)
mask = classification_summary$depth == depth
}
}
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
classification_summary = dplyr::mutate(classification_summary, pct = count / sum(count))
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area()
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area()
classification_summary
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA, 0)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area()
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth')
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates')
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification')
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification') +
theme(margin(0,0,0,0))
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification')
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0))
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map) +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
rm(list = ls())
library(ggplot2)
library(dplyr)
seed = 7
data_dir = paste0('../data')
base_rep_dir = paste0(data_dir, '/reps/', seed)
replay_base_dir = paste0(base_rep_dir, '/replays')
df = read.csv(paste0(data_dir, '/combined_final_dominant_data.csv'))
df$depth = 0
for(depth in list.files(replay_base_dir)){
print(depth)
replay_dir = paste0(replay_base_dir, '/', depth)
df_tmp = read.csv(paste0(replay_dir, '/combined_final_dominant_data.csv'))
if(nrow(df_tmp) <= 1){
next
}
df_tmp$depth = depth
df = rbind(df, df_tmp)
}
df$depth = as.numeric(df$depth)
df_grouped = dplyr::group_by(df, depth, seed)
df_summary = dplyr::summarize(df_grouped, count = dplyr::n(),
accuracy_mean = mean(accuracy), accuracy_max = max(accuracy), accuracy_min = min(accuracy),
merit_mean = mean(merit), merit_max = max(merit), merit_min = min(merit),
door_rooms_mean = mean(door_rooms), door_rooms_max = max(door_rooms), door_rooms_min = min(door_rooms),
exit_rooms_mean = mean(exit_rooms), exit_rooms_max = max(exit_rooms), exit_rooms_min = min(exit_rooms),
correct_doors_mean = mean(correct_doors), correct_doors_max = max(correct_doors), correct_doors_min = min(correct_doors),
incorrect_doors_mean = mean(incorrect_doors), incorrect_doors_max = max(incorrect_doors), incorrect_doors_min = min(incorrect_doors),
correct_exits_mean = mean(correct_exits), correct_exits_max = max(correct_exits), correct_exits_min = min(correct_exits),
incorrect_exits_mean = mean(incorrect_exits), incorrect_exits_max = max(incorrect_exits), incorrect_exits_min = min(incorrect_exits),
genome_length = mean(genome_length)
)
ggplot(df, aes(x = depth, y = accuracy)) +
geom_boxplot()
ggplot(df_summary, aes(x = depth, y = accuracy_mean)) +
geom_point()
# Set constant variables
learning_str = 'Learning'
error_correction_str = 'Error correction'
other_str = 'Other'
small_str = 'Small'
bet_hedging_str = 'Bet hedging'
classifcation_order_vec = c(error_correction_str, learning_str, bet_hedging_str, other_str, small_str)
color_map = c( # Muted qualitative scheme from Paul Tor https://personal.sron.nl/~pault/
'Error correction' = '#ee99aa',
'Learning' = '#6699cc',
'Other' = '#eecc66',
'Small' = '#997700',
'Bet hedging' = '#000000'
)
# Classify replicates
df_summary$classification = other_str
#df_summary[!is.na(df_summary$doors_accuracy_1) & (df_summary$doors_accuracy_0 == 1 | df_summary$doors_taken_0 == 0) & df_summary$correct_doors < 50,]$classification = small_str
df_summary[df_summary$accuracy_mean >= 0.98 & df_summary$correct_doors_mean >= 50,]$classification = learning_str
df_summary[df_summary$accuracy_mean >= 0.63 & df_summary$accuracy_mean <= 0.70,]$classification = error_correction_str
df_summary[df_summary$accuracy_max == 1 & df_summary$accuracy_min == 0 & df_summary$correct_doors_mean >= 50,]$classification = bet_hedging_str
df_summary[df_summary$correct_doors_mean < 50,]$classification = small_str
df_summary$classification_factor = factor(df_summary$classification, levels = classifcation_order_vec)
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA, 0)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map) +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
rm(list = ls())
library(ggplot2)
library(dplyr)
seed = 7
data_dir = paste0('../data')
base_rep_dir = paste0(data_dir, '/reps/', seed)
replay_base_dir = paste0(base_rep_dir, '/replays')
df = read.csv(paste0(data_dir, '/combined_final_dominant_data.csv'))
df$depth = 0
for(depth in list.files(replay_base_dir)){
print(depth)
replay_dir = paste0(replay_base_dir, '/', depth)
df_tmp = read.csv(paste0(replay_dir, '/combined_final_dominant_data.csv'))
if(nrow(df_tmp) <= 1){
next
}
df_tmp$depth = depth
df = rbind(df, df_tmp)
}
df$depth = as.numeric(df$depth)
df_grouped = dplyr::group_by(df, depth, seed)
df_summary = dplyr::summarize(df_grouped, count = dplyr::n(),
accuracy_mean = mean(accuracy), accuracy_max = max(accuracy), accuracy_min = min(accuracy),
merit_mean = mean(merit), merit_max = max(merit), merit_min = min(merit),
door_rooms_mean = mean(door_rooms), door_rooms_max = max(door_rooms), door_rooms_min = min(door_rooms),
exit_rooms_mean = mean(exit_rooms), exit_rooms_max = max(exit_rooms), exit_rooms_min = min(exit_rooms),
correct_doors_mean = mean(correct_doors), correct_doors_max = max(correct_doors), correct_doors_min = min(correct_doors),
incorrect_doors_mean = mean(incorrect_doors), incorrect_doors_max = max(incorrect_doors), incorrect_doors_min = min(incorrect_doors),
correct_exits_mean = mean(correct_exits), correct_exits_max = max(correct_exits), correct_exits_min = min(correct_exits),
incorrect_exits_mean = mean(incorrect_exits), incorrect_exits_max = max(incorrect_exits), incorrect_exits_min = min(incorrect_exits),
genome_length = mean(genome_length)
)
ggplot(df, aes(x = depth, y = accuracy)) +
geom_boxplot()
ggplot(df_summary, aes(x = depth, y = accuracy_mean)) +
geom_point()
# Set constant variables
learning_str = 'Learning'
error_correction_str = 'Error correction'
other_str = 'Other'
small_str = 'Small'
bet_hedging_str = 'Bet hedging'
classifcation_order_vec = c(learning_str, error_correction_str, bet_hedging_str, other_str, small_str)
color_map = c( # Muted qualitative scheme from Paul Tor https://personal.sron.nl/~pault/
'Error correction' = '#ee99aa',
'Learning' = '#6699cc',
'Other' = '#eecc66',
'Small' = '#997700',
'Bet hedging' = '#000000'
)
# Classify replicates
df_summary$classification = other_str
#df_summary[!is.na(df_summary$doors_accuracy_1) & (df_summary$doors_accuracy_0 == 1 | df_summary$doors_taken_0 == 0) & df_summary$correct_doors < 50,]$classification = small_str
df_summary[df_summary$accuracy_mean >= 0.98 & df_summary$correct_doors_mean >= 50,]$classification = learning_str
df_summary[df_summary$accuracy_mean >= 0.63 & df_summary$accuracy_mean <= 0.70,]$classification = error_correction_str
df_summary[df_summary$accuracy_max == 1 & df_summary$accuracy_min == 0 & df_summary$correct_doors_mean >= 50,]$classification = bet_hedging_str
df_summary[df_summary$correct_doors_mean < 50,]$classification = small_str
df_summary$classification_factor = factor(df_summary$classification, levels = classifcation_order_vec)
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA, 0)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map) +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ggplot(classification_summary, aes(x = depth, y = pct, fill = classification_factor)) +
geom_area() +
scale_fill_manual(values = color_map) +
xlab('Phylogenetic depth') +
ylab('Percetnage of replicates') +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map) +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
depth = 399
print(depth)
replay_dir = paste0(replay_base_dir, '/', depth)
df_tmp = read.csv(paste0(replay_dir, '/combined_final_dominant_data.csv'))
if(nrow(df_tmp) <= 1){
next
}
df_tmp$depth = depth
df = rbind(df, df_tmp)
df$depth = as.numeric(df$depth)
df_grouped = dplyr::group_by(df, depth, seed)
df_summary = dplyr::summarize(df_grouped, count = dplyr::n(),
accuracy_mean = mean(accuracy), accuracy_max = max(accuracy), accuracy_min = min(accuracy),
merit_mean = mean(merit), merit_max = max(merit), merit_min = min(merit),
door_rooms_mean = mean(door_rooms), door_rooms_max = max(door_rooms), door_rooms_min = min(door_rooms),
exit_rooms_mean = mean(exit_rooms), exit_rooms_max = max(exit_rooms), exit_rooms_min = min(exit_rooms),
correct_doors_mean = mean(correct_doors), correct_doors_max = max(correct_doors), correct_doors_min = min(correct_doors),
incorrect_doors_mean = mean(incorrect_doors), incorrect_doors_max = max(incorrect_doors), incorrect_doors_min = min(incorrect_doors),
correct_exits_mean = mean(correct_exits), correct_exits_max = max(correct_exits), correct_exits_min = min(correct_exits),
incorrect_exits_mean = mean(incorrect_exits), incorrect_exits_max = max(incorrect_exits), incorrect_exits_min = min(incorrect_exits),
genome_length = mean(genome_length)
)
ggplot(df, aes(x = depth, y = accuracy)) +
geom_boxplot()
ggplot(df_summary, aes(x = depth, y = accuracy_mean)) +
geom_point()
# Set constant variables
learning_str = 'Learning'
error_correction_str = 'Error correction'
other_str = 'Other'
small_str = 'Small'
bet_hedging_str = 'Bet hedging'
classifcation_order_vec = c(learning_str, error_correction_str, bet_hedging_str, other_str, small_str)
color_map = c( # Muted qualitative scheme from Paul Tor https://personal.sron.nl/~pault/
'Error correction' = '#ee99aa',
'Learning' = '#6699cc',
'Other' = '#eecc66',
'Small' = '#997700',
'Bet hedging' = '#000000'
)
# Classify replicates
df_summary$classification = other_str
#df_summary[!is.na(df_summary$doors_accuracy_1) & (df_summary$doors_accuracy_0 == 1 | df_summary$doors_taken_0 == 0) & df_summary$correct_doors < 50,]$classification = small_str
df_summary[df_summary$accuracy_mean >= 0.98 & df_summary$correct_doors_mean >= 50,]$classification = learning_str
df_summary[df_summary$accuracy_mean >= 0.63 & df_summary$accuracy_mean <= 0.70,]$classification = error_correction_str
df_summary[df_summary$accuracy_max == 1 & df_summary$accuracy_min == 0 & df_summary$correct_doors_mean >= 50,]$classification = bet_hedging_str
df_summary[df_summary$correct_doors_mean < 50,]$classification = small_str
df_summary$classification_factor = factor(df_summary$classification, levels = classifcation_order_vec)
classification_grouped = dplyr::group_by(df_summary, depth, classification, classification_factor)
classification_summary = dplyr::summarize(classification_grouped, count = dplyr::n(), accuracy_mean_mean = mean(accuracy_mean), merit_mean_mean = mean(merit_mean))
classification_summary$pct = 0
for(depth in unique(classification_summary$depth)){
mask = classification_summary$depth == depth
for(classification_string in classifcation_order_vec){
if(!(classification_string %in% classification_summary[mask,]$classification)){
cat(depth, ' ', classification_string, '\n')
classification_summary[nrow(classification_summary) + 1,] = list(depth, classification_string, classification_string, 0, NA, NA, 0)
mask = classification_summary$depth == depth
}
}
classification_summary[mask,]$pct = classification_summary[mask,]$count / sum(classification_summary[mask,]$count)
}
ggplot(classification_summary, aes(x = classification_factor, y = count, fill = classification_factor)) +
geom_col() +
facet_grid(cols = vars(as.factor(depth))) +
scale_fill_manual(values = color_map)
ggplot(classification_summary, aes(x = depth, y = count, fill = classification_factor)) +
geom_area() +
xlab('Phylogenetic depth') +
ylab('Number of replicates') +
scale_fill_manual(values = color_map) +
labs(fill = 'Classification') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
classification_summary
classification_summary[classification_summary$depth > 166,]
