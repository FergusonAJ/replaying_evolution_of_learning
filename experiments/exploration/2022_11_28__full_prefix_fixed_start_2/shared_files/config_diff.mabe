// List of all possible start patterns for the paths. 
// Empty for random. Semicolons separate patterns, while 
// commas separate door indices in each pattern. 
// Indices start at 1 for non-exit doors.

eval_doors.start_patterns = "1,1,1,1,2,1,1,3,1,1,3,1,2,1,1,1,1,2,1,1,1,2,1,1,2,1,1,1,1,3,1,1,3,1,3,3,1,3,1,1,3,1,1,1,2,1,1,3,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,1,1,3,1,3,1,3,1,1,1,1,3,1,1,2,1,2,2,2,2,1,2,1,1,3,1,1,2,1,1,2,1,1,1,2,2,1,1,3,1,3,1,1,3,3,1,1,1,2,1,1;1,2,1,1,1,1,1,2,1,1,3,1,1,1,3,1,2,1,2,2,1,1,1,2,1,3,1,1,2,1,1,2,1,2,1,1,2,1,1,1,1,3,1,1,1,3,1,3,3,1,1,1,2,1,1,1,3,1,3,1,3,1,1,3,3,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,3,1,3,1,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,2,2,2,1,1,2,1,1,1,3,1,1,1,1,2,1,1,1;1,2,1,1,2,1,3,1,1,1,3,1,3,1,1,3,1,1,1,2,1,1,3,1,2,1,2,1,1,2,1,1,3,1,2,1,1,2,1,1,2,1,2,1,2,1,1,3,1,1,3,1,1,3,1,3,1,1,3,3,1,1,3,1,1,1,1,3,1,1,2,1,1,1,3,1,1,2,1,3,1,3,3,1,1,3,1,1,2,1,3,1,1,2,1,2,2,1,1,2,1,2,1,1,1,1,1,2,1,1,2,1,2,2,1,1,3,1,2,1,1,1,1,3,1,3,1;2,1,1,1,3,1,1,3,1,1,1,3,1,1,1,3,1,1,2,1,2,1,1,2,2,1,1,3,1,3,1,3,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,3,1,1,3,1,1,2,1,3,1,1,3,1,1,3,1,3,3,1,1,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,2,1,2,1,1,2,1,1,1,2,1,1,3,1,3,1,3,1,2,1,2,2,2,1,1,3,1,2,2,1,1,1,3,1,1,1,2,1,2,1,1,1";

//1,1,1,1,2,1,1,3,1,1,3,1,2,1,1,1,1,2,1,1,1,2,1,1,2,1,1,1,1,3,1,1,3,1,3,3,1,3,1,1,3,1,1,1,2,1,1,3,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,1,1,3,1,3,1,3,1,1,1,1,3,1,1,2,1,2,2,2,2,1,2,1,1,3,1,1,2,1,1,2,1,1,1,2,2,1,1,3,1,3,1,1,3,3,1,1,1,2,1,1;
//1,2,1,1,1,1,1,2,1,1,3,1,1,1,3,1,2,1,2,2,1,1,1,2,1,3,1,1,2,1,1,2,1,2,1,1,2,1,1,1,1,3,1,1,1,3,1,3,3,1,1,1,2,1,1,1,3,1,3,1,3,1,1,3,3,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,3,1,3,1,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,2,2,2,1,1,2,1,1,1,3,1,1,1,1,2,1,1,1;
//1,2,1,1,2,1,3,1,1,1,3,1,3,1,1,3,1,1,1,2,1,1,3,1,2,1,2,1,1,2,1,1,3,1,2,1,1,2,1,1,2,1,2,1,2,1,1,3,1,1,3,1,1,3,1,3,1,1,3,3,1,1,3,1,1,1,1,3,1,1,2,1,1,1,3,1,1,2,1,3,1,3,3,1,1,3,1,1,2,1,3,1,1,2,1,2,2,1,1,2,1,2,1,1,1,1,1,2,1,1,2,1,2,2,1,1,3,1,2,1,1,1,1,3,1,3,1;
//2,1,1,1,3,1,1,3,1,1,1,3,1,1,1,3,1,1,2,1,2,1,1,2,2,1,1,3,1,3,1,3,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,3,1,1,3,1,1,2,1,3,1,1,3,1,1,3,1,3,3,1,1,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,2,1,2,1,1,2,1,1,1,2,1,1,3,1,3,1,3,1,2,1,2,2,2,1,1,3,1,2,2,1,1,1,3,1,1,1,2,1,2,1,1,1

//+,+,+,+,R,+,+,L,+,+,L,+,R,+,+,+,+,R,+,+,+,R,+,+,R,+,+,+,+,L,+,+,L,+,L,L,+,L,+,+,L,+,+,+,R,+,+,L,+,L,+,L,+,+,+,L,+,+,+,R,+,+,R,+,L,+,+,+,L,+,L,+,L,+,+,+,+,L,+,+,R,+,R,R,R,R,+,R,+,+,L,+,+,R,+,+,R,+,+,+,R,R,+,+,L,+,L,+,+,L,L,+,+,+,R,+,+;
//+,R,+,+,+,+,+,R,+,+,L,+,+,+,L,+,R,+,R,R,+,+,+,R,+,L,+,+,R,+,+,R,+,R,+,+,R,+,+,+,+,L,+,+,+,L,+,L,L,+,+,+,R,+,+,+,L,+,L,+,L,+,+,L,L,+,+,+,+,+,R,+,+,+,+,+,+,+,+,R,+,+,L,+,L,+,+,L,+,L,+,+,+,L,+,+,+,R,+,+,R,+,R,R,R,+,+,R,+,+,+,L,+,+,+,+,R,+,+,+;
//+,R,+,+,R,+,L,+,+,+,L,+,L,+,+,L,+,+,+,R,+,+,L,+,R,+,R,+,+,R,+,+,L,+,R,+,+,R,+,+,R,+,R,+,R,+,+,L,+,+,L,+,+,L,+,L,+,+,L,L,+,+,L,+,+,+,+,L,+,+,R,+,+,+,L,+,+,R,+,L,+,L,L,+,+,L,+,+,R,+,L,+,+,R,+,R,R,+,+,R,+,R,+,+,+,+,+,R,+,+,R,+,R,R,+,+,L,+,R,+,+,+,+,L,+,L,+;
//R,+,+,+,L,+,+,L,+,+,+,L,+,+,+,L,+,+,R,+,R,+,+,R,R,+,+,L,+,L,+,L,L,+,+,+,L,+,+,+,R,+,+,R,+,L,+,L,+,+,L,+,+,R,+,L,+,+,L,+,+,L,+,L,L,+,+,+,R,+,R,+,+,R,+,+,+,L,+,+,R,+,R,+,R,+,+,R,+,+,+,R,+,+,L,+,L,+,L,+,R,+,R,R,R,+,+,L,+,R,R,+,+,+,L,+,+,+,R,+,R,+,+,+
