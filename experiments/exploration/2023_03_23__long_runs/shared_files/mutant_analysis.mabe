Var num_trials = 100;
Var cur_genome;
Var trial_num = 0;
Var output_filename = "single_org_fitness.csv";
Var do_two_step = 0;

Var original_genome = "";
Var alphabet_size = 26;
Var num_one_step_muts = 10;
Var one_step_mut_seed = 0;
Var one_step_mut_type = "NA";
Var one_step_mut_local_seed = 0;
Var two_step_mut_seed = 0;
Var two_step_mut_type = "NA";
Var two_step_mut_local_seed = 0;

MutantGenerator mut_gen;

DataFile fit_file { filename="single_org_fitness.csv"; };
fit_file.ADD_COLUMN("trial_number", "trial_num" );
fit_file.ADD_SETUP("cur_genome = main_pop.CALC_MODE('genome')" );
fit_file.ADD_COLUMN("genome", "cur_genome" );
fit_file.ADD_COLUMN("merit",      "main_pop.CALC_MEAN('child_merit')" );
fit_file.ADD_COLUMN("accuracy",   "main_pop.CALC_MEAN('accuracy')" );
fit_file.ADD_COLUMN("genome_length", "main_pop.CALC_MEAN('genome_length')" );
fit_file.ADD_COLUMN("door_rooms", "main_pop.CALC_MEAN('door_rooms')" );
fit_file.ADD_COLUMN("exit_rooms", "main_pop.CALC_MEAN('exit_rooms')" );
fit_file.ADD_COLUMN("correct_doors", "main_pop.CALC_MEAN('correct_doors')" );
fit_file.ADD_COLUMN("incorrect_doors", "main_pop.CALC_MEAN('incorrect_doors')" );
fit_file.ADD_COLUMN("correct_exits", "main_pop.CALC_MEAN('correct_exits')" );
fit_file.ADD_COLUMN("incorrect_exits", "main_pop.CALC_MEAN('incorrect_exits')" );
fit_file.ADD_COLUMN("doors_taken_0", "main_pop.CALC_MEAN('doors_taken_0')" );
fit_file.ADD_COLUMN("doors_correct_0", "main_pop.CALC_MEAN('doors_correct_0')" );
fit_file.ADD_COLUMN("doors_taken_1", "main_pop.CALC_MEAN('doors_taken_1')" );
fit_file.ADD_COLUMN("doors_correct_1", "main_pop.CALC_MEAN('doors_correct_1')" );
fit_file.ADD_COLUMN("doors_taken_2", "main_pop.CALC_MEAN('doors_taken_2')" );
fit_file.ADD_COLUMN("doors_correct_2", "main_pop.CALC_MEAN('doors_correct_2')" );
fit_file.ADD_COLUMN("doors_taken_3", "main_pop.CALC_MEAN('doors_taken_3')" );
fit_file.ADD_COLUMN("doors_correct_3", "main_pop.CALC_MEAN('doors_correct_3')" );
fit_file.ADD_COLUMN("one_step_mut_seed", "one_step_mut_seed" );
fit_file.ADD_COLUMN("one_step_mut_type", "one_step_mut_type" );
fit_file.ADD_COLUMN("one_step_mut_local_seed", "one_step_mut_local_seed" );
fit_file.ADD_COLUMN("two_step_mut_seed", "two_step_mut_seed" );
fit_file.ADD_COLUMN("two_step_mut_type", "two_step_mut_type" );
fit_file.ADD_COLUMN("two_step_mut_local_seed", "two_step_mut_local_seed" );

@START() {
  PRINT("");
  PRINT("random_seed = ", random_seed);  // Print seed at run start.
  PRINT("Running ", num_trials, " trials per mutant.");
  PRINT("Saving output to: ", output_filename);
  fit_file.filename = output_filename;

  // Calculate properties of original genome
  Var num_orig_point_muts = mut_gen.GET_NUM_POINT_MUTATIONS(original_genome, alphabet_size);
  Var num_orig_del_muts = mut_gen.GET_NUM_DELETION_MUTATIONS(original_genome);
  Var num_orig_ins_muts = mut_gen.GET_NUM_INSERTION_MUTATIONS(original_genome, alphabet_size);
  Var total_orig_muts = num_orig_point_muts + num_orig_del_muts + num_orig_ins_muts;

  // Loop over each one-step mutation we need to analyze
  Var original_one_step_mut_seed = one_step_mut_seed;
  WHILE(one_step_mut_seed < original_one_step_mut_seed + num_one_step_muts){
    two_step_mut_seed = -1;
    two_step_mut_local_seed = -1;
    two_step_mut_type = "one-step";
    Var one_step_genome = "";
    IF(one_step_mut_seed < num_orig_point_muts){ // Point mutations
      one_step_mut_local_seed = one_step_mut_seed;
      one_step_mut_type = "point";
      one_step_genome = mut_gen.GET_POINT_MUTATION(original_genome, alphabet_size, one_step_mut_local_seed);
    }
    ELSE IF(one_step_mut_seed < num_orig_point_muts + num_orig_del_muts){// Deletion mutations
      one_step_mut_local_seed = one_step_mut_seed - num_orig_point_muts;
      one_step_mut_type = "del";
      one_step_genome = mut_gen.GET_DELETION_MUTATION(original_genome, one_step_mut_local_seed);
    }
    ELSE IF(one_step_mut_seed < total_orig_muts){ // Insertion mutations
      one_step_mut_local_seed = one_step_mut_seed - (num_orig_point_muts + num_orig_del_muts);
      one_step_mut_type = "ins";
      one_step_genome = mut_gen.GET_INSERTION_MUTATION(original_genome, alphabet_size, one_step_mut_local_seed);
    }
    PRINT("One-step seed: ", one_step_mut_seed, "; genome: ", one_step_genome, "\n");
    IF(one_step_genome != ""){
      trial_num = 0;
      WHILE(trial_num < num_trials){
        Population empty_pop;
        main_pop.REPLACE_WITH(empty_pop);
        main_pop.INJECT("avida_org", 1);    // Inject organism 
        main_pop.SET_GENOME(0, one_step_genome);
        scheduler.EVAL(main_pop, 10000, 1); // Evaluate organism
        trial_num = trial_num + 1;
      }
      IF(do_two_step > 0){
        Var num_one_step_point_muts = 
            mut_gen.GET_NUM_POINT_MUTATIONS(one_step_genome, alphabet_size);
        Var num_one_step_del_muts = 
            mut_gen.GET_NUM_DELETION_MUTATIONS(one_step_genome);
        Var num_one_step_ins_muts = 
            mut_gen.GET_NUM_INSERTION_MUTATIONS(one_step_genome, alphabet_size);
        Var total_one_step_muts = 
            num_one_step_point_muts + num_one_step_del_muts + num_one_step_ins_muts;
        two_step_mut_seed = 0;
        WHILE(two_step_mut_seed < total_one_step_muts){
          Var two_step_genome = "";
          IF(two_step_mut_seed < num_one_step_point_muts){ // Point mutations
            two_step_mut_local_seed = two_step_mut_seed;
            two_step_mut_type = "point";
            two_step_genome = mut_gen.GET_POINT_MUTATION(one_step_genome, alphabet_size, two_step_mut_local_seed);
          }
          ELSE IF(two_step_mut_seed < num_one_step_point_muts + num_one_step_del_muts){// Deletion mutations
            two_step_mut_local_seed = two_step_mut_seed - num_one_step_point_muts;
            two_step_mut_type = "del";
            two_step_genome = mut_gen.GET_DELETION_MUTATION(one_step_genome, two_step_mut_local_seed);
          }
          ELSE IF(two_step_mut_seed < total_one_step_muts){ // Insertion mutations
            two_step_mut_local_seed = 
                two_step_mut_seed - (num_one_step_point_muts + num_one_step_del_muts);
            two_step_mut_type = "ins";
            two_step_genome = mut_gen.GET_INSERTION_MUTATION(one_step_genome, alphabet_size, two_step_mut_local_seed);
          }
          IF(two_step_genome != ""){
            trial_num = 0;
            WHILE(trial_num < num_trials){
              Population empty_pop;
              main_pop.REPLACE_WITH(empty_pop);
              main_pop.INJECT("avida_org", 1);    // Inject organism 
              main_pop.SET_GENOME(0, two_step_genome);
              scheduler.EVAL(main_pop, 10000, 1); // Evaluate organism
              trial_num = trial_num + 1;
            }
          }
          two_step_mut_seed = two_step_mut_seed + 1;
        }
      }  
    }
    ELSE{
        PRINT("Reached end of one-step mutations! Exiting...");
        EXIT();
    }
    one_step_mut_seed = one_step_mut_seed + 1;
  }
  EXIT();
};

@BEFORE_REPRO(){
  fit_file.WRITE();
}
