random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Var pop_size = 3600;            // Local value variable.
Var max_updates = 250000;         // Local value variable.
Var task_reward_type = "mult";

NeighborPlacement grid_placement{
  grid_height = 60;             // Height of the grid the population lives on
  grid_width = 60;              // Width of the grid the population lives on
  target = "main_pop";          // Population(s) to manage.
  use_moore_neighborhood = 1;   // If true, use a Moore neighborhood.
                                    // If false, use a von Neumann neighborhood
};
AnnotatePlacement_Position pos_annotater { // Store org's position as trait on placement.
  target = "main_pop";      // Population(s) to annotate
  pos_trait = "org_pos";    // Name of trait that will hold organism's position
};
SchedulerProbabilistic scheduler { // Rations out updates to organisms based on a specified attribute, using a method akin to roulette wheel selection.
  pop = "main_pop";             // Which population should we select parents from?
  avg_updates = 30;             // How many updates should organism receive on average?
  trait = "merit";              // Which trait provides the fitness value to use?
  base_value = 1;               // What value should the scheduler use for organisms that have performed no tasks?
  merit_scale_factor = 2;       // How should the scheduler scale merit?
};
VirtualCPU_Inst_Nop inst_lib_nop { // Nop instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  num_nops = 3;                 // Number of nops to include.
};
VirtualCPU_Inst_Math inst_lib_math { // Math instructions for VirtualCPUOrg
  target_pop = "main_pop"; // Population(s) to manage.
};
VirtualCPU_Inst_IO inst_lib_io { // IO instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  input_name = "input";         // Name of variable to store inputs
  output_name = "output";       // Name of variable to store outputs
  input_idx_name = "input_idx"; // Index of next input to be loaded
};
VirtualCPU_Inst_Flow inst_lib_flow { // Flow control instructions for VirtualCPUOrg
  target_pop = "main_pop";  // Population(s) to manage.
};
VirtualCPU_Inst_Manipulation inst_lib_manip { // Manipulation instructions for VirtualCPUOrg
  target_pop = "main_pop"; // Population(s) to manage.
};
VirtualCPU_Inst_Replication inst_lib_repl { // Replication instructions for VirtualCPUOrg
  target_pop = "main_pop";      // Population(s) to manage.
  pos_trait = "org_pos";        // Name of trait that holds organism's position
  offspring_genome_trait = "offspring_genome"; // Name of trait that holds the offspring organism's genome
  req_count_inst_executed = -1; // Minimum number of instructions that the organism must 
                                  // execute before its allowed to reproduce. Otherwise 
                                  // reproduction instructions do nothing.  Takes priority 
                                  // over `req_frac_inst_executed`; -1 to use fraction instead
  req_frac_inst_executed = 0.75;  // The organism must have executed at least this fraction 
                                  // of their genome to reproduce. Otherwise reproduction 
                                  // instructions do nothing. 
                                  // Overruled by `req_count_inst_executed`
};
EvalTaskNot task_not {          // Organism-triggered evaluation of NOT operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "not_performed";// Which trait should track if BASE was executed?
  reward_value = 2;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskNand task_nand {        // Organism-triggered evaluation of NAND operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "nand_performed";// Which trait should track if BASE was executed?
  reward_value = 2;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskAnd task_and {          // Organism-triggered evaluation of AND operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "and_performed";// Which trait should track if BASE was executed?
  reward_value = 4;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskOrnot task_ornot {      // Organism-triggered evaluation of ORNOT operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "ornot_performed";// Which trait should track if BASE was executed?
  reward_value = 4;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskAndnot task_andnot {    // Organism-triggered evaluation of ANDNOT operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "andnot_performed";// Which trait should track if BASE was executed?
  reward_value = 8;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskOr task_or {            // Organism-triggered evaluation of OR operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "or_performed";// Which trait should track if BASE was executed?
  reward_value = 8;             // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskNor task_nor {          // Organism-triggered evaluation of NOR operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "nor_performed";// Which trait should track if BASE was executed?
  reward_value = 16;            // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskXor task_xor {          // Organism-triggered evaluation of XOR operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "xor_performed";// Which trait should track if BASE was executed?
  reward_value = 16;            // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
EvalTaskEqu task_equ {          // Organism-triggered evaluation of EQU operation
  target_pop = "main_pop";      // Population to evaluate.
  inputs_trait = "input";       // Which trait contains the organism's inputs?
  outputs_trait = "output";     // Which trait contains the organism's outputs?
  fitness_trait = "child_merit";// Which trait should we increase if BASE was executed?
  performed_trait = "equ_performed";// Which trait should track if BASE was executed?
  reward_value = 32;            // How large is the reward for performing this task?
  reward_type = task_reward_type;// How to apply the reward to the organism's merit?
                                //  add: Additive. New merit = old merit + reward
                                //  mult: Multiplicative. New merit = old merit * reward
                                //  pow: Power. New merit = old merit * (2 ^ reward)
};
VirtualCPUOrg avida_org {       // Organism consisting of Avida instructions.
  site_point_mut_prob = 0.0075; // Per-site probability of a point mutations
  site_insertion_mut_prob = 0;  // Per-site probability of a insertion mutations
  site_deletion_mut_prob = 0;   // Per-site probability of a deletion mutations
  genome_point_mut_prob = 0;        // Per-genome probability of a point mutations
  genome_insertion_mut_prob = 0.05; // Per-genome probability of a insertion mutations
  genome_deletion_mut_prob = 0.05;  // Per-genome probability of a deletion mutations
  N = 0;                        // Initial number of instructions in genome
  init_random = 0;              // Should we randomize ancestor?  (0 = "blank" default)
  eval_time = 200;              // How many CPU cycles should we give organisms to run?
  input_name = "input";         // Name of variable to load inputs from.
  output_name = "old_output";   // Name of variable to output results.
  genome_name = "genome";       // Where to store the genome?.
  genome_length_name = "genome_length";   // Where to store the genome's length? 
  position_name = "org_pos";    // Where to store the organism's position?.
  merit_name = "merit";         // Name of variable corresponding to the organism's task performance.
  child_merit_name = "child_merit";// Name of variable corresponding to the organism's task performance that will be used to calculate CPU cylces given to offspring.
  initial_merit = 1;       // Initial value for merit (task performance)
  verbose = 0;
  initial_genome_filename = "../../shared_files/ancestor.org";
                              // File that contains the gennome used to initialize organisms.
  inst_set_input_filename = "../../shared_files/inst_set_input.txt"; 
                              // File that contains the instruction set to use. 
                              // One instruction name per line. Order is maintained.
  inst_set_output_filename = "inst_set_output.txt";
  expanded_nop_args = 0;        // If true, some instructions (e.g., math) will use multiple nops to fully define the registers used
  use_speculative_execution = 1;// If true, we run as many instructions as possible and then cache the results. Instructions that interact with the population or other organisms will halt speculative execution.
  max_speculative_insts = 20; // Maximum number of instructions to speculatively execute. -1 for genome length.
};
AnalyzeSystematics sys{
  data_file_name = "phylo/phylogenetic_data.csv";// Filename for systematics data file.
  data_updates = "0:1:-1";      // Which updates should we output a data from the phylogeny?
  snapshot_file_root_name = "phylo/phylogeny";// Filename for snapshot files (will have update number and .csv appended to end)
  snapshot_updates = "0:0:0";  // Which updates should we output a snapshot of the phylogeny?
  store_ancestors = 1;          // Store all ancestors of extant taxa.(1 = TRUE)
  store_outside = 0;            // Store all taxa that ever existed.(1 = TRUE)
  taxon_info = "genome";        // Which trait should we identify unique taxa based on
};
