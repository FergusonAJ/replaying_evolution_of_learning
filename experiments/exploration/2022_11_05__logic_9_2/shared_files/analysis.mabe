Var num_trials = 100;
Var cur_genome;
Var trial_num;

DataFile fit_file { filename="single_org_fitness.csv"; };
fit_file.ADD_COLUMN("trial_number", "trial_num" );
fit_file.ADD_SETUP("cur_genome = main_pop.CALC_MODE('genome')" );
fit_file.ADD_COLUMN("genome", "cur_genome" );
fit_file.ADD_COLUMN("merit",         "main_pop.CALC_MEAN('child_merit')" );
fit_file.ADD_COLUMN("genome_length", "main_pop.CALC_MEAN('genome_length')" );
fit_file.ADD_COLUMN("merit",         "main_pop.CALC_MEAN('child_merit')" );
fit_file.ADD_COLUMN("merit_given",   "main_pop.CALC_MEAN('merit')" );
fit_file.ADD_COLUMN("not",           "main_pop.CALC_MEAN('not_performed')" );
fit_file.ADD_COLUMN("nand",          "main_pop.CALC_MEAN('nand_performed')" );
fit_file.ADD_COLUMN("and",           "main_pop.CALC_MEAN('and_performed')" );
fit_file.ADD_COLUMN("ornot",         "main_pop.CALC_MEAN('ornot_performed')" );
fit_file.ADD_COLUMN("andnot",        "main_pop.CALC_MEAN('andnot_performed')" );
fit_file.ADD_COLUMN("or",            "main_pop.CALC_MEAN('or_performed')" );
fit_file.ADD_COLUMN("nor",           "main_pop.CALC_MEAN('nor_performed')" );
fit_file.ADD_COLUMN("xor",           "main_pop.CALC_MEAN('xor_performed')" );
fit_file.ADD_COLUMN("equ",           "main_pop.CALC_MEAN('equ_performed')" );
fit_file.ADD_COLUMN("did_repro",     "did_repro" );

Var did_repro = 0;
@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  trial_num = 0;
  WHILE(trial_num < num_trials){
    did_repro = 0;
    Population empty_pop;  
    main_pop.REPLACE_WITH(empty_pop);
    main_pop.INJECT("avida_org", 1);    // Inject organism 
    scheduler.EVAL(main_pop, 10000, 1); // Evaluate organism
    trial_num = trial_num + 1;
    IF(did_repro == 0){
      fit_file.WRITE();
    }
  }
  PRINT("Ran ", trial_num, " trials!");
  EXIT();
};
@BEFORE_REPRO(){
  did_repro = 1;
  fit_file.WRITE();
}
