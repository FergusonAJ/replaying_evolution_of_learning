// Merit is equal to score_exp_base^(org's score)
eval_doors.score_exp_base = 2;

// How many instruction executions the org will miss after taking an exit
eval_doors.exit_cooldown = 0;
// How much exit_cooldown increases when exit is taken
eval_doors.exit_cooldown_step = 0;
// How many exits are required are needed for  exit_cooldown to increase
eval_doors.exit_cooldown_step_req = 1;

// List of all possible start patterns for the paths. 
// Empty for random. Semicolons separate patterns, while 
// commas separate door indices in each pattern. 
// Indices start at 1 for non-exit doors.

// One fixed turn
eval_doors.start_patterns = "1,1,1,1,2,1,1,3,1,1,3,1,2,1,1,1,1,2,1,1,1,2,1,1,2,1,1,1,1,3,1,1,3,1,3,3,1,3,1,1,3,1,1,1,2,1,1,3,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,1,1,3,1,3,1,3,1,1,1,1,3,1,1,2,1,2,2,2,2,1,2,1,1,3,1,1,2,1,1,2,1,1,1,2,2,1,1,3,1,3,1,1,3,3,1,1,1,2,1,1;1,2,1,1,1,1,1,2,1,1,3,1,1,1,3,1,2,1,2,2,1,1,1,2,1,3,1,1,2,1,1,2,1,2,1,1,2,1,1,1,1,3,1,1,1,3,1,3,3,1,1,1,2,1,1,1,3,1,3,1,3,1,1,3,3,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,3,1,3,1,1,3,1,3,1,1,1,3,1,1,1,2,1,1,2,1,2,2,2,1,1,2,1,1,1,3,1,1,1,1,2,1,1,1;1,2,1,1,2,1,3,1,1,1,3,1,3,1,1,3,1,1,1,2,1,1,3,1,2,1,2,1,1,2,1,1,3,1,2,1,1,2,1,1,2,1,2,1,2,1,1,3,1,1,3,1,1,3,1,3,1,1,3,3,1,1,3,1,1,1,1,3,1,1,2,1,1,1,3,1,1,2,1,3,1,3,3,1,1,3,1,1,2,1,3,1,1,2,1,2,2,1,1,2,1,2,1,1,1,1,1,2,1,1,2,1,2,2,1,1,3,1,2,1,1,1,1,3,1,3,1;2,1,1,1,3,1,1,3,1,1,1,3,1,1,1,3,1,1,2,1,2,1,1,2,2,1,1,3,1,3,1,3,3,1,1,1,3,1,1,1,2,1,1,2,1,3,1,3,1,1,3,1,1,2,1,3,1,1,3,1,1,3,1,3,3,1,1,1,2,1,2,1,1,2,1,1,1,3,1,1,2,1,2,1,2,1,1,2,1,1,1,2,1,1,3,1,3,1,3,1,2,1,2,2,2,1,1,3,1,2,2,1,1,1,3,1,1,1,2,1,2,1,1,1";
